<?xml version="1.0" encoding="utf-8"?>
<!-- Properties listed as TreatAsLocalProperty are so that they can be modified when set globaly via command prompt or VSTS. -->
<Project TreatAsLocalProperty="BuildServiceModelPackages;BuildSvcUtilPackage" ToolsVersion="14.0" DefaultTargets="BuildAndTest" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\dir.props" />

  <PropertyGroup>
    <PackageReportDir Condition="'$(PackageReportDir)' == ''">$(BinDir)pkg/reports/</PackageReportDir>
    
    <!-- 'StabilizePackageVersion' is used in conjunction with 'PackageVersionStamp' to determine whether or not a label and build number should be appended to a package name. -->
    <!-- Default behavior when not building stable packages is to build both ServiceModel and SvcUtil packages. -->
    <!-- 'StabilizePackageVersion' is a flag set manually when stable packages are needed. -->
    <!-- 'BuildServiceModelPackages' and 'BuildSvcUtilPackage' should also be explicitly set when stable packages are desired, otherwise no packages will be built. -->
    <BuildServiceModelPackages Condition="'$(StabilizePackageVersion)' != 'true' AND '$(BuildServiceModelPackages)' == ''">true</BuildServiceModelPackages>
    <BuildSvcUtilPackage Condition="'$(StabilizePackageVersion)' != 'true' AND '$(BuildSvcUtilPackage)' == ''">true</BuildSvcUtilPackage>
  </PropertyGroup>

  <ItemGroup Condition="'$(BuildServiceModelPackages)' == 'true'" >
    <Project Include="$(MSBuildThisFileDirectory)\System.Private.ServiceModel\pkg\System.Private.ServiceModel.pkgproj">
      <AdditionalProperties>$(AdditionalProperties)</AdditionalProperties>
    </Project>
    <Project Include="$(MSBuildThisFileDirectory)\System.ServiceModel.Duplex\pkg\System.ServiceModel.Duplex.pkgproj">
      <AdditionalProperties>$(AdditionalProperties)</AdditionalProperties>
    </Project>
    <Project Include="$(MSBuildThisFileDirectory)\System.ServiceModel.Http\pkg\System.ServiceModel.Http.pkgproj">
      <AdditionalProperties>$(AdditionalProperties)</AdditionalProperties>
    </Project>
    <Project Include="$(MSBuildThisFileDirectory)\System.ServiceModel.NetTcp\pkg\System.ServiceModel.NetTcp.pkgproj">
      <AdditionalProperties>$(AdditionalProperties)</AdditionalProperties>
    </Project>
    <Project Include="$(MSBuildThisFileDirectory)\System.ServiceModel.Primitives\pkg\System.ServiceModel.Primitives.pkgproj">
      <AdditionalProperties>$(AdditionalProperties)</AdditionalProperties>
    </Project>
    <Project Include="$(MSBuildThisFileDirectory)\System.ServiceModel.Security\pkg\System.ServiceModel.Security.pkgproj">
      <AdditionalProperties>$(AdditionalProperties)</AdditionalProperties>
    </Project>
  </ItemGroup>

  <ItemGroup Condition="'$(BuildSvcUtilPackage)' == 'true'" >
    <Project Include="$(MSBuildThisFileDirectory)\svcutilcore\pkg\dotnet-svcutil.xmlserializer.pkgproj">
      <AdditionalProperties>$(AdditionalProperties)</AdditionalProperties>
    </Project>
  </ItemGroup>

  <!-- Need the PackageIndexFile file property from baseline.props -->
  <Import Project="../pkg/baseline/baseline.props" />

  <UsingTask TaskName="UpdatePackageIndex" AssemblyFile="$(PackagingTaskDir)Microsoft.DotNet.Build.Tasks.Packaging.dll"/>

  <!--
    Updates the package index to mark all packages we are building that can go stable as stable.
    this will allow for a kicked off build to control package stability at queue time. This does edit
    the package index in-place but that shouldn't cause any problems for official builds are the only
    ones that might do this. After we ship a stable set of packages this target should be run and the
    changes to the package index should be commited to the repo.
  -->
  <Target Name="UpdatePackageIndexWithStableVersions"
          BeforeTargets="BuildAllProjects"
          Condition="'$(IncludePreReleaseLabelInPackageVersion)' != 'true'">
    <ItemGroup>
      <PkgProjects Include="$(MSBuildThisFileDirectory)..\pkg\*\*.pkgproj" />
      <PkgProjects Include="*\pkg\**\*.pkgproj" />
    </ItemGroup>

    <MSBuild Targets="GetPackageIdentityIfStable"
             BuildInParallel="$(BuildInParallel)"
             Projects="@(PkgProjects)"
             RemoveProperties="Configuration">
      <Output TaskParameter="TargetOutputs"
              ItemName="_StablePackages" />
    </MSBuild>

    <Message Importance="high" Text="Marking package '%(_StablePackages.Identity)' stable with version '%(_StablePackages.Version)'" />

    <UpdatePackageIndex
      PackageIndexFile="$(PackageIndexFile)"
      StablePackages="@(_StablePackages)" />

  </Target>

  <UsingTask TaskName="GenerateNetStandardSupportTable" AssemblyFile="$(PackagingTaskDir)Microsoft.DotNet.Build.Tasks.Packaging.dll" />
  <Target Name="GenerateNETStandardDocs">
    <Error Condition="'$(WcfPackageReportDir)' == ''"
           Text="WcfPackageReportDir must be specified to point to the package report directory of the WCF repo.  EG: /p:WcfPackageReportDir=c:\src\wcf\bin\pkg\reports\" />
    <ItemGroup>
      <Reports Include="$(PackageReportDir)*.json" />
      <Reports Include="$(WcfPackageReportDir)*.json" />
    </ItemGroup>

    <GenerateNetStandardSupportTable Reports="@(Reports)" DocFilePath="$(ProjectDir)Documentation\architecture\net-platform-standard.md" InsertIntoFile="True" />
  </Target>

  <!-- Importing versioning.targets adds the hooks so that a traversal build will generate the "SyncInfoFile" (version.txt) which we package. -->
  <Import Project="$(ToolsDir)versioning.targets" Condition="Exists('$(ToolsDir)versioning.targets')" />
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.traversal.targets))\dir.traversal.targets" />
</Project>
